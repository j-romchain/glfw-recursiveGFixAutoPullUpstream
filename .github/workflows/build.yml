name: Build
on:
    push:
    workflow_dispatch:

jobs:
    build-linux-clang:
        name: Linux (Clang)
        runs-on: ubuntu-latest
        timeout-minutes: 4
        env:
            CC: clang
            CFLAGS: -Werror
        steps:
            - uses: actions/checkout@v4
            - name: Install dependencies
              run: |
                  sudo apt update
                  sudo apt install libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev libwayland-dev libxkbcommon-dev

            - name: Configure Null shared library
              run: cmake -B build-null-shared -D GLFW_BUILD_WAYLAND=OFF -D GLFW_BUILD_X11=OFF -D BUILD_SHARED_LIBS=ON
            - name: Build Null shared library
              run: cmake --build build-null-shared --parallel

            - name: Configure X11 shared library
              run: cmake -B build-x11-shared -D GLFW_BUILD_WAYLAND=OFF -D GLFW_BUILD_X11=ON -D BUILD_SHARED_LIBS=ON
            - name: Build X11 shared library
              run: cmake --build build-x11-shared --parallel

            - name: Configure Wayland shared library
              run: cmake -B build-wayland-shared -D GLFW_BUILD_WAYLAND=ON -D GLFW_BUILD_X11=OFF -D BUILD_SHARED_LIBS=ON
            - name: Build Wayland shared library
              run: cmake --build build-wayland-shared --parallel

            - name: Configure Wayland+X11 static library
              run: cmake -B build-full-static -D GLFW_BUILD_WAYLAND=ON -D GLFW_BUILD_X11=ON
            - name: Build Wayland+X11 static library
              run: cmake --build build-full-static --parallel

            - name: Configure Wayland+X11 shared library
              run: cmake -B build-full-shared -D GLFW_BUILD_WAYLAND=ON -D BUILD_SHARED_LIBS=ON -D GLFW_BUILD_X11=ON
            - name: Build Wayland+X11 shared library
              run: cmake --build build-full-shared --parallel

            - name: Upload Linux artifacts
              uses: actions/upload-artifact@v4
              with:
                name: glfw-linux  # Give your artifacts a descriptive name
                path: build-*/src/* # Path to the built librarie
                if-no-files-found: error # Fail the workflow if no files are uploaded

    build-macos-clang:
        name: macOS (Clang)
        runs-on: macos-latest
        timeout-minutes: 4
        env:
            CFLAGS: -Werror
            MACOSX_DEPLOYMENT_TARGET: 10.11
            CMAKE_OSX_ARCHITECTURES: x86_64;arm64
        steps:
            - uses: actions/checkout@v4

            - name: Configure Null shared library
              run: cmake -B build-null-shared -D GLFW_BUILD_COCOA=OFF -D BUILD_SHARED_LIBS=ON
            - name: Build Null shared library
              run: cmake --build build-null-shared --parallel

            - name: Configure Cocoa static library
              run: cmake -B build-cocoa-static
            - name: Build Cocoa static library
              run: cmake --build build-cocoa-static --parallel

            - name: Configure Cocoa shared library
              run: cmake -B build-cocoa-shared -D BUILD_SHARED_LIBS=ON
            - name: Build Cocoa shared library
              run: cmake --build build-cocoa-shared --parallel
            - name: Upload macOS artifacts
              uses: actions/upload-artifact@v4
              with:
                name: glfw-macos
                path: build-*/src/*
                if-no-files-found: error

    build-windows-vs2022:
        name: Windows (VS2022)
        runs-on: windows-latest
        timeout-minutes: 4
        env:
            CFLAGS: /WX
        steps:
            - uses: actions/checkout@v4

            - name: Configure Win32 shared x86 library
              run: cmake -B build-win32-shared-x86 -G "Visual Studio 17 2022" -A Win32 -D BUILD_SHARED_LIBS=ON
            - name: Build Win32 shared x86 library
              run: cmake --build build-win32-shared-x86 --parallel

            - name: Configure Win32 static x64 library
              run: cmake -B build-win32-static-x64 -G "Visual Studio 17 2022" -A x64
            - name: Build Win32 static x64 library
              run: cmake --build build-win32-static-x64 --parallel

            - name: Configure Win32 shared x64 library
              run: cmake -B build-win32-shared-x64 -G "Visual Studio 17 2022" -A x64 -D BUILD_SHARED_LIBS=ON
            - name: Build Win32 shared x64 library
              run: cmake --build build-win32-shared-x64 --parallel
            - name: Upload Windows artifacts
              uses: actions/upload-artifact@v4
              with:
                name: glfw-windows
                path: build-*/src/*
                if-no-files-found: error
    create-release:
        name: Create Release
        runs-on: ubuntu-latest  # Or any suitable runner
        needs: [build-linux-clang, build-macos-clang, build-windows-vs2022] # Job dependencies
        permissions:
          contents: write # Required for creating releases
        steps:
          - name: Download Linux artifacts
            uses: actions/download-artifact@v4
            with:
              name: glfw-linux
    
          - name: Download macOS artifacts
            uses: actions/download-artifact@v4
            with:
              name: glfw-macos
    
          - name: Download Windows artifacts
            uses: actions/download-artifact@v4
            with:
              name: glfw-windows
          - name: List files in the current directory
            run: ls -la
          - name: Get current date and time
            id: date
            run: echo "date=$(date)" >> $GITHUB_OUTPUT
          - name: Get current date and time for tag
            id: tag_date
            run: echo "tag_date=$(date '+%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
          - name: Create tag and release
            id: create_release
            uses: actions/github-script@v6
            with:
              github-token: ${{ secrets.GITHUB_TOKEN }}
              script: |
                const fs = require('fs');
                const tag = `on-push-${{ steps.tag_date.outputs.tag_date }}`;
                await github.rest.git.createTag({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag: tag,
                  message: `On push result ${tag}`,
                  object: context.sha,  // SHA of the current commit
                  type: 'commit'
                });
                await github.rest.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `refs/tags/${tag}`,
                  sha: context.sha
                });
                const release = await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: tag,
                  name: `RecursiveG patched GLFW on push build ${{ steps.date.outputs.date }}`,
                  body: `This release is by a workflow (bot) that has detected a push. Likely from another workflow (bot) pulling changes from the parent repo and then applying this forks' changes to it automatically.`,
                  draft: false,
                  prerelease: false
                });
                const uploadAsset = async (name, path) => {
                  await github.rest.repos.uploadReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release.data.id,
                    name: name,
                    data: fs.readFileSync(path)
                  });
                };
                await Promise.all([
                  uploadAsset('glfw-linux', 'glfw-linux'),
                  uploadAsset('glfw-macos', 'glfw-macos'),
                  uploadAsset('glfw-windows', 'glfw-windows')
                ]);
