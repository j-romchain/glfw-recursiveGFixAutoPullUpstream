name: Update from Upstream
on:
  workflow_dispatch:
  schedule:
    - cron: 0 2 * * 1
jobs:
  update:
    name: Pull down commits from a parent repo
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with: 
        fetch-depth: 0
    - name: Check and merge from upstream
      run: |
        # This is where the magic happens
        date
        echo Configuring Git
        git remote set-url origin https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        git config --global user.email "${{ secrets.EMAIL }}"
        git config --global user.name "upstreamPuller"
      
        echo Fetching
        git fetch origin master
      
        echo Upstream
        git remote add upstream https://github.com/glfw/glfw.git
      
        echo Fetching
        git fetch upstream
      
        echo TryMerge
        git merge --no-commit upstream/master 2>&1
        # and recording the output for in a moment
        merge_result=$(git merge --no-commit upstream/master 2>&1) # Use upstream/master
        
        echo Results...
        if [[ "$merge_result" =~ "Automatic merge failed" || "$merge_result" =~ "CONFLICT" ]]; then
          echo "Conflicts detected during simulated merge with upstream master."
          echo "$merge_result" # Print the merge result (including conflicts)
          echo "Performing action for conflicts..."
          # I would potentially email the owner or something here
          # Create a pull request (more complex, requires GitHub API)
          
        elif [[ "$merge_result" =~ "Already up to date" ]]; then
          echo "No upstream changes detected, this was all useless."
          echo "If someone wants to make this eventuality not happen, perhaps let workflows run when an update to another repository happens."
          
        else
          echo "No conflicts detected during sim. Actually merging..."
          git merge upstream/master || { echo "Error: Merge failed."; exit 1; }
          git commit -m "Merged upstream master" || { echo "Error: Commit failed."; exit 1; }
          git push origin master || { echo "Error: Push failed."; exit 1; } # Push to your repo
      
          echo "Performing action for no conflicts..."
          # Example: Run tests (replace with your desired command)
          # I would potentially build and release here, but thats hard.
          # ...
      
        fi
  build-linux-clang:
        name: Linux (Clang)
        runs-on: ubuntu-latest
        timeout-minutes: 4
        env:
            CC: clang
            CFLAGS: -Werror
        steps:
            - uses: actions/checkout@v4
            - name: Install dependencies
              run: |
                  sudo apt update
                  sudo apt install libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev libwayland-dev libxkbcommon-dev

            - name: Configure Null shared library
              run: cmake -B build-null-shared -D GLFW_BUILD_WAYLAND=OFF -D GLFW_BUILD_X11=OFF -D BUILD_SHARED_LIBS=ON
            - name: Build Null shared library
              run: cmake --build build-null-shared --parallel

            - name: Configure X11 shared library
              run: cmake -B build-x11-shared -D GLFW_BUILD_WAYLAND=OFF -D GLFW_BUILD_X11=ON -D BUILD_SHARED_LIBS=ON
            - name: Build X11 shared library
              run: cmake --build build-x11-shared --parallel

            - name: Configure Wayland shared library
              run: cmake -B build-wayland-shared -D GLFW_BUILD_WAYLAND=ON -D GLFW_BUILD_X11=OFF -D BUILD_SHARED_LIBS=ON
            - name: Build Wayland shared library
              run: cmake --build build-wayland-shared --parallel

            - name: Configure Wayland+X11 static library
              run: cmake -B build-full-static -D GLFW_BUILD_WAYLAND=ON -D GLFW_BUILD_X11=ON
            - name: Build Wayland+X11 static library
              run: cmake --build build-full-static --parallel

            - name: Configure Wayland+X11 shared library
              run: cmake -B build-full-shared -D GLFW_BUILD_WAYLAND=ON -D BUILD_SHARED_LIBS=ON -D GLFW_BUILD_X11=ON
            - name: Build Wayland+X11 shared library
              run: cmake --build build-full-shared --parallel

  build-macos-clang:
      name: macOS (Clang)
      runs-on: macos-latest
      timeout-minutes: 4
      env:
          CFLAGS: -Werror
          MACOSX_DEPLOYMENT_TARGET: 10.11
          CMAKE_OSX_ARCHITECTURES: x86_64;arm64
      steps:
          - uses: actions/checkout@v4

          - name: Configure Null shared library
            run: cmake -B build-null-shared -D GLFW_BUILD_COCOA=OFF -D BUILD_SHARED_LIBS=ON
          - name: Build Null shared library
            run: cmake --build build-null-shared --parallel

          - name: Configure Cocoa static library
            run: cmake -B build-cocoa-static
          - name: Build Cocoa static library
            run: cmake --build build-cocoa-static --parallel

          - name: Configure Cocoa shared library
            run: cmake -B build-cocoa-shared -D BUILD_SHARED_LIBS=ON
          - name: Build Cocoa shared library
            run: cmake --build build-cocoa-shared --parallel

  build-windows-vs2022:
      name: Windows (VS2022)
      runs-on: windows-latest
      timeout-minutes: 4
      env:
          CFLAGS: /WX
      steps:
          - uses: actions/checkout@v4

          - name: Configure Win32 shared x86 library
            run: cmake -B build-win32-shared-x86 -G "Visual Studio 17 2022" -A Win32 -D BUILD_SHARED_LIBS=ON
          - name: Build Win32 shared x86 library
            run: cmake --build build-win32-shared-x86 --parallel

          - name: Configure Win32 static x64 library
            run: cmake -B build-win32-static-x64 -G "Visual Studio 17 2022" -A x64
          - name: Build Win32 static x64 library
            run: cmake --build build-win32-static-x64 --parallel

          - name: Configure Win32 shared x64 library
            run: cmake -B build-win32-shared-x64 -G "Visual Studio 17 2022" -A x64 -D BUILD_SHARED_LIBS=ON
          - name: Build Win32 shared x64 library
            run: cmake --build build-win32-shared-x64 --parallel

